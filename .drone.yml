kind: pipeline
type: docker
name: lint

steps:
  - name: lint
    image: golang:1.17
    commands:
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.47.2
      - golangci-lint run
---
kind: pipeline
type: exec
name: testing

platform:
  os: linux
  arch: amd64

workspace:
  path: /tmp/drone

steps:
  - name: Build bbi
    commands:
      - mkdir -p /tmp/${DRONE_BUILD_NUMBER} ; git rev-parse HEAD > /tmp/${DRONE_BUILD_NUMBER}/bbi_hash
      - # this is a hack around the current design; will clean up after passing a test or two
      - go build -o bbi cmd/bbi/main.go
      - ./bbi version
  - name: Copy commit hashes to s3
    commands:
      - printf "[\n" > /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - printf "  {\"repo\":\"metrumresearchgroup/bbi\", \"commit\":\"$(cat /tmp/${DRONE_BUILD_NUMBER}/bbi_hash)\"},\n" >> /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - printf "]\n" >> /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - aws s3 cp /tmp/${DRONE_BUILD_NUMBER}/commits.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/commits.json
  - name: Copy summary info for mrgvalidate to s3
    commands:
      - |
        cat > /tmp/${DRONE_BUILD_NUMBER}/summary.json <<EOF
        {
          "date": "$(date +"%D %T")",
          "executor": "Drone CI",
          "info": {
            "commit": "$(git rev-parse HEAD)",
            "drone_build_number": "$DRONE_BUILD_NUMBER"
          }
        }
        EOF
      - aws s3 cp /tmp/${DRONE_BUILD_NUMBER}/summary.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/summary.json
  - name: Unit Test
    commands:
      - go install github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@latest
      - if [ ! -d /data/${DRONE_BUILD_NUMBER}/apps ] ; then mkdir -p /data/${DRONE_BUILD_NUMBER}/apps; chmod -R 0755 /data/${DRONE_BUILD_NUMBER}/apps; cp bbi /data/${DRONE_BUILD_NUMBER}/apps; else cp bbi /data/${DRONE_BUILD_NUMBER}/apps; fi
      - export PATH=$PATH:/data/${DRONE_BUILD_NUMBER}/apps
      - export ROOT_EXECUTION_DIR=/data/${DRONE_BUILD_NUMBER}
      - export BBI_GRID_NAME_PREFIX="drone_${DRONE_BUILD_NUMBER}"
      - bbi init --dir /opt/NONMEM
      - rm -f /data/${DRONE_BUILD_NUMBER}/test_output.json
      -
      - go list ./... | grep -v integration | xargs go test --json  | tee /data/${DRONE_BUILD_NUMBER}/test_output.json --append | ~/go/bin/gotestfmt --hide empty-packages
      - aws s3 cp /data/${DRONE_BUILD_NUMBER}/test_output.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/results.json
    environment:
      LOCAL: true
      MPIEXEC_PATH: /usr/bin/mpiexec
      NMVERSION_NMQUAL: nm74gf
      NMVERSION: nm75
      NONMEMROOT: /opt/NONMEM
      PATH: /usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
      POST_EXECUTION: true
      SGE: true
      SGE_ARCH: lx-amd64
      SGE_CELL: default
      SGE_CLUSTER_NAME: p6444
      SGE_EXECD_PORT: 6445
      SGE_QMASTER_PORT: 6444
      SGE_ROOT: /opt/sge
    volumes:
      - name: nonmem
        path: /opt/NONMEM
      - name: tmp
        path: /tmp
      - name: data
        path: /data
  - name: Integration Test
    commands:
      - if [ ! -d /data/${DRONE_BUILD_NUMBER}/apps ] ; then mkdir -p /data/${DRONE_BUILD_NUMBER}/apps; chmod -R 0755 /data/${DRONE_BUILD_NUMBER}/apps; cp bbi /data/${DRONE_BUILD_NUMBER}/apps; else cp bbi /data/${DRONE_BUILD_NUMBER}/apps; fi
      - export PATH=$PATH:/data/${DRONE_BUILD_NUMBER}/apps
      - cd integration
      - export ROOT_EXECUTION_DIR=/data/${DRONE_BUILD_NUMBER}
      - export BBI_GRID_NAME_PREFIX="drone_${DRONE_BUILD_NUMBER}"
      - bbi init --dir /opt/NONMEM
      - go test ./... -v --json -timeout 30m | tee /data/${DRONE_BUILD_NUMBER}/test_output.json --append | ~/go/bin/gotestfmt --hide empty-packages
      - aws s3 cp /data/${DRONE_BUILD_NUMBER}/test_output.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/results.json
      - chmod +x failure_detector.sh
      - ./failure_detector.sh /data/${DRONE_BUILD_NUMBER}/test_output.json
      - rm -rf /data/${DRONE_BUILD_NUMBER}
    environment:
      LOCAL: true
      MPIEXEC_PATH: /usr/bin/mpiexec
      NMVERSION_NMQUAL: nm74gf
      NMVERSION: nm75
      NONMEMROOT: /opt/NONMEM
      PATH: /usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
      POST_EXECUTION: true
      SGE: true
      SGE_ARCH: lx-amd64
      SGE_CELL: default
      SGE_CLUSTER_NAME: p6444
      SGE_EXECD_PORT: 6445
      SGE_QMASTER_PORT: 6444
      SGE_ROOT: /opt/sge
    volumes:
      - name: nonmem
        path: /opt/NONMEM
      - name: tmp
        path: /tmp
      - name: data
        path: /data



  - name: Cleanup on failure
    commands:
      - rm -rf /data/${DRONE_BUILD_NUMBER}
    volumes:
      - name: data
        path: /data
    when:
      status:
        - failure

volumes:
  - name: nonmem
    host:
      path: /opt/NONMEM
  - name: tmp
    host:
      path: /tmp
  - name: data
    host:
      path: /data

---
kind: pipeline
type: docker
name: goreleaser

platform:
  os: linux
  arch: amd64

steps:
  - name: goreleaser
    image: goreleaser/goreleaser
    commands:
      - git config --global user.email "drone@metrumrg.com"
      - git config --global user.name "Drony"
      - git fetch --tags
      - cd cmd/bbi
      - goreleaser --rm-dist
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
      VERSION: ${DRONE_TAG}

trigger:
  event:
    - tag

depends_on:
  - testing

...
