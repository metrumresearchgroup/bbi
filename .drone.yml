kind: pipeline
type: docker
name: lint

steps:
  - name: lint
    image: golang:1.17
    commands:
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.1
      - golangci-lint run
---
kind: pipeline
type: exec
name: testing
depends_on:
  - lint

platform:
  os: linux
  arch: amd64

workspace:
  path: /tmp/drone

steps:
  - name: Build bbi
    commands:
      - mkdir -p /tmp/${DRONE_BUILD_NUMBER} ; git rev-parse HEAD > /tmp/${DRONE_BUILD_NUMBER}/bbi_hash
      - # this is a hack around the current design; will clean up after passing a test or two
      - go build -o bbi cmd/bbi/main.go
      - ./bbi version

  - name: Copy commit hashes to s3
    commands:
      - printf "[\n" > /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - printf "  {\"repo\":\"metrumresearchgroup/bbi\", \"commit\":\"$(cat /tmp/${DRONE_BUILD_NUMBER}/bbi_hash)\"},\n" >> /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - printf "]\n" >> /tmp/${DRONE_BUILD_NUMBER}/commits.json
      - aws s3 cp /tmp/${DRONE_BUILD_NUMBER}/commits.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/commits.json
  - name: Unit Test
    commands:
      - if [ ! -d /data/${DRONE_BUILD_NUMBER}/apps ] ; then mkdir -p /data/${DRONE_BUILD_NUMBER}/apps; chmod -R 0755 /data/${DRONE_BUILD_NUMBER}/apps; cp bbi /data/${DRONE_BUILD_NUMBER}/apps; else cp bbi /data/${DRONE_BUILD_NUMBER}/apps; fi
      - export PATH=$PATH:/data/${DRONE_BUILD_NUMBER}/apps
      - export ROOT_EXECUTION_DIR=/data/${DRONE_BUILD_NUMBER}
      - export BBI_GRID_NAME_PREFIX="drone_${DRONE_BUILD_NUMBER}"
      - bbi init --dir /opt/NONMEM
      - go list ./... | grep -v integration | xargs go test
    environment:
      LOCAL: true
      MPIEXEC_PATH: /usr/bin/mpiexec
      NMQUAL: true
      NMVERSION: nm74gf
      NONMEMROOT: /opt/NONMEM
      PATH: /usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
      POST_EXECUTION: true
      SGE: true
      SGE_ARCH: lx-amd64
      SGE_CELL: default
      SGE_CLUSTER_NAME: p6444
      SGE_EXECD_PORT: 6445
      SGE_QMASTER_PORT: 6444
      SGE_ROOT: /opt/sge
    volumes:
      - name: nonmem
        path: /opt/NONMEM
      - name: tmp
        path: /tmp
      - name: data
        path: /data
  - name: Integration Test
    commands:
      - if [ ! -d /data/${DRONE_BUILD_NUMBER}/apps ] ; then mkdir -p /data/${DRONE_BUILD_NUMBER}/apps; chmod -R 0755 /data/${DRONE_BUILD_NUMBER}/apps; cp bbi /data/${DRONE_BUILD_NUMBER}/apps; else cp bbi /data/${DRONE_BUILD_NUMBER}/apps; fi
      - export PATH=$PATH:/data/${DRONE_BUILD_NUMBER}/apps
      - cd integration
      - export ROOT_EXECUTION_DIR=/data/${DRONE_BUILD_NUMBER}
      - export BBI_GRID_NAME_PREFIX="drone_${DRONE_BUILD_NUMBER}"
      - bbi init --dir /opt/NONMEM
      - go test ./... -v --json -timeout 30m | tee test_output.json
      - aws s3 cp test_output.json s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/results.json
      - chmod +x failure_detector.sh
      - ./failure_detector.sh test_output.json
      - rm -rf /data/${DRONE_BUILD_NUMBER}
    environment:
      LOCAL: true
      MPIEXEC_PATH: /usr/bin/mpiexec
      NMQUAL: true
      NMVERSION: nm74gf
      NONMEMROOT: /opt/NONMEM
      PATH: /usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
      POST_EXECUTION: true
      SGE: true
      SGE_ARCH: lx-amd64
      SGE_CELL: default
      SGE_CLUSTER_NAME: p6444
      SGE_EXECD_PORT: 6445
      SGE_QMASTER_PORT: 6444
      SGE_ROOT: /opt/sge
    volumes:
      - name: nonmem
        path: /opt/NONMEM
      - name: tmp
        path: /tmp
      - name: data
        path: /data



  - name: Cleanup on failure
    commands:
      - rm -rf /data/${DRONE_BUILD_NUMBER}
    volumes:
      - name: data
        path: /data
    when:
      status:
        - failure

volumes:
  - name: nonmem
    host:
      path: /opt/NONMEM
  - name: tmp
    host:
      path: /tmp
  - name: data
    host:
      path: /data

---
kind: pipeline
type: exec
name: validation

platform:
  os: linux
  arch: amd64

workspace:
  path: /tmp/drone

steps:
  - name: GoProjectValidator
    commands:
      - git clone https://github.com/metrumresearchgroup/goProjectValidator.git
      - cd goProjectValidator/cmd/pvgo
      - go build -o gpv main.go
      - cp ../../../validation.json .
      - ls -larth
      - mkdir testoutput
      - mkdir rendered
      - aws s3 cp s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/results.json testoutput/results.json
      - aws s3 cp s3://mrg-validation/bbi/${DRONE_BUILD_NUMBER}/commits.json commits.json
      - ./gpv --scenarioFile validation.json --commitsFile commits.json --testsDirectory testoutput --outputDirectory rendered
      - aws s3 cp rendered/specification.md s3://mrg-validation/bbi/${DRONE_TAG}/specification.md
      - aws s3 cp rendered/testing_and_validation.md s3://mrg-validation/bbi/${DRONE_TAG}/testing_and_validation.md
      - aws s3 cp rendered/traceability_matrix.md s3://mrg-validation/bbi/${DRONE_TAG}/traceability_matrix.md
      - pandoc -o specification.pdf -V geometry:"paperwidth=8in, paperheight=11in, margin=15pt" rendered/specification.md
      - pandoc -o testing_and_validation.pdf -V geometry:"paperwidth=8in, paperheight=11in, margin=15pt" rendered/testing_and_validation.md
      - pandoc -o traceability_matrix.pdf -V geometry:"paperwidth=22in, paperheight=210mm, margin=2cm" rendered/traceability_matrix.md
      - aws s3 cp specification.pdf s3://mrg-validation/bbi/${DRONE_TAG}/specification.pdf
      - aws s3 cp testing_and_validation.pdf s3://mrg-validation/bbi/${DRONE_TAG}/testing_and_validation.pdf
      - aws s3 cp traceability_matrix.pdf s3://mrg-validation/bbi/${DRONE_TAG}/traceability_matrix.pdf

trigger:
  event:
    - tag

depends_on:
  - testing

---
kind: pipeline
type: docker
name: goreleaser

platform:
  os: linux
  arch: amd64

steps:
  - name: goreleaser
    image: goreleaser/goreleaser
    commands:
      - git config --global user.email "drone@metrumrg.com"
      - git config --global user.name "Drony"
      - git fetch --tags
      - cd cmd/bbi
      - goreleaser --rm-dist
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
      VERSION: ${DRONE_TAG}

trigger:
  event:
    - tag

depends_on:
  - testing

...
